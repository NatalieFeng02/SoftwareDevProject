{{> in_nav}}

<div class="container text-center">
  <h1 class="display-4 mt-5" id="main-logo">LyricSense</h1>
  <p class="lead">A tool that uses artificial intelligence to help you delve deep into the meaning and history of song lyrics.</p>
  <a href="/search" class="btn btn-primary btn-lg mt-4">Get Started</a>
  
  <!-- Container for the album covers displayed in a 3x3 grid -->
  <div class="album-container mt-5"></div>
</div>


<style>

#main-logo{
    font-family: 'DieNasty', sans-serif;
    font-size: 52px;
}
    
  .album-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Creates a 3-column grid */
    grid-gap: 10px; /* Adjust the gap as needed */
    max-width: 600px; /* Adjust based on your preference */
    margin: auto; /* Center the grid */
  }

.album-cover {
  transition: opacity 2s ease-in-out; /* Smooth transition for the opacity */
  background: #000; /* Or any color that matches your design */
  display: inline-block; /* Or flex, depending on your layout */
}

.album-cover img {
  max-width: 100%;
  height: auto;
  display: block; /* Remove extra space under the image */
}

</style>

<script>
let displayedAlbums = []; // Global variable to store displayed albums

// Define all the functions needed

// Function to shuffle an array (Fisher-Yates shuffle)
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]]; // Swap elements
    }
}

// Function to fetch and display albums initially
async function fetchAndDisplayAlbums() {
  try {
    const response = await fetch('/api/album-covers'); //get request to endpoint
    const albums = await response.json(); //converts JSON into a JS object
    shuffleArray(albums); // Shuffle the albums
    displayedAlbums = albums.slice(0, 9); // Now storing the first 9 shuffled albums globally
    displayAlbums(displayedAlbums); // Display these albums
    rotateAlbums(); // Safe to call here, as displayedAlbums is now populated
  } catch (error) {
    console.error('Failed to fetch album covers:', error);
  }
}



// Function to display album covers in the container
function displayAlbums(albums) {
  const container = document.querySelector('.album-container');
  container.innerHTML = ''; // Clear existing content

  //creates new div for each album cover and adds the cover to album-container
  albums.slice(0, 9).forEach(album => { //New array from OG array, runs function through each element
    const wrapper = document.createElement('div');
    wrapper.className = 'album-cover'; // Apply class to the wrapper for the fade effect
    wrapper.innerHTML = `<img src="${album.imageUrl}" alt="${album.name}" style="max-width:100%; height:auto;">`;
    container.appendChild(wrapper);
  });
}



// Function to rotate one album cover at a time
// Assuming displayedAlbums is a globally available array of album objects

function rotateAlbums() {
    let currentIndex = -1; // Initialize outside valid range to ensure the first selected index is 0

    // Function to handle the transition of album covers
    const transitionAlbumCover = () => { //nested function
        let nextIndex; //new random cover chosen to change
        do {
            nextIndex = Math.floor(Math.random() * displayedAlbums.length);
        } while (nextIndex === currentIndex); // Avoid repeating the same album

        currentIndex = nextIndex; // Update currentIndex for the next iteration

        fetchAlbumCovers().then(newAlbums => { //fetched new album covers
            shuffleArray(newAlbums); // Ensure randomness

            const newAlbum = newAlbums.find(album => !displayedAlbums.some(displayedAlbum => displayedAlbum.imageUrl === album.imageUrl)); //finds first album not displayed yet
            if (newAlbum) {
                const albumElement = document.querySelectorAll('.album-cover')[nextIndex];
                const imgElement = albumElement.querySelector('img');
                if (imgElement) {
                    // Fade out the current image
                    albumElement.style.opacity = 0;

                    //delays opacity going to 0 for 2 seconds, changes the cover, and fades it back in
                    setTimeout(() => {
                        const img = new Image();
                        img.onload = () => {
                            imgElement.src = img.src;
                            imgElement.alt = newAlbum.name || 'Classic Album';
                            setTimeout(() => {
                                albumElement.style.opacity = 1;
                            }, 100); // Short delay to ensure smooth transition
                        };
                        img.src = newAlbum.imageUrl; // Start loading the new image

                        displayedAlbums[nextIndex] = newAlbum; //displayed image updated to newAlbum
                    }, 2000); // Wait for the fade-out to complete
                }
            }
        }).catch(error => {
            console.error('Failed to rotate album covers:', error);
        });
    };

    // Immediately execute transitionAlbumCover for the first transition
    //?
    transitionAlbumCover();

    // Then set up the interval for subsequent transitions
    setInterval(() => {
        transitionAlbumCover();
    }, 5000); // transition album cover every 5 seconds
}







// Fetches new album covers, you might need to adjust depending on your actual implementation
async function fetchAlbumCovers() {
  const response = await fetch('/api/album-covers');
  const newAlbums = await response.json();
  return newAlbums;
}

// Only fetches album covers after DOM has loaded
document.addEventListener('DOMContentLoaded', fetchAndDisplayAlbums);
</script>
